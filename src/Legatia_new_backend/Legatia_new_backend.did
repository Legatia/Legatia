type UserProfile = record {
  id : text;
  full_name : text;
  surname_at_birth : text;
  sex : text;
  birthday : text;
  birth_city : text;
  birth_country : text;
  created_at : nat64;
  updated_at : nat64;
};

type CreateProfileRequest = record {
  full_name : text;
  surname_at_birth : text;
  sex : text;
  birthday : text;
  birth_city : text;
  birth_country : text;
};

type UpdateProfileRequest = record {
  full_name : opt text;
  surname_at_birth : opt text;
  sex : opt text;
  birthday : opt text;
  birth_city : opt text;
  birth_country : opt text;
};

type FamilyEvent = record {
  id : text;
  member_id : text;
  title : text;
  description : text;
  event_date : text;
  event_type : text;
  created_at : nat64;
  created_by : principal;
};

type FamilyMember = record {
  id : text;
  profile_principal : opt principal;
  full_name : text;
  surname_at_birth : text;
  sex : text;
  birthday : opt text;
  birth_city : opt text;
  birth_country : opt text;
  death_date : opt text;
  relationship_to_admin : text;
  events : vec FamilyEvent;
  created_at : nat64;
  created_by : principal;
};

type Family = record {
  id : text;
  name : text;
  description : text;
  admin : principal;
  members : vec FamilyMember;
  is_visible : bool;
  created_at : nat64;
  updated_at : nat64;
};

type CreateFamilyRequest = record {
  name : text;
  description : text;
  is_visible : opt bool;
};

type AddFamilyMemberRequest = record {
  family_id : text;
  full_name : text;
  surname_at_birth : text;
  sex : text;
  birthday : opt text;
  birth_city : opt text;
  birth_country : opt text;
  death_date : opt text;
  relationship_to_admin : text;
};

type AddEventRequest = record {
  family_id : text;
  member_id : text;
  title : text;
  description : text;
  event_date : text;
  event_type : text;
};

type ProfileResult = variant { Ok : UserProfile; Err : text };
type FamilyResult = variant { Ok : Family; Err : text };
type FamilyListResult = variant { Ok : vec Family; Err : text };
type FamilyMemberResult = variant { Ok : FamilyMember; Err : text };
type FamilyEventResult = variant { Ok : FamilyEvent; Err : text };
type FamilyEventsResult = variant { Ok : vec FamilyEvent; Err : text };
type StringResult = variant { Ok : text; Err : text };

type GhostProfileMatch = record {
  family_id : text;
  member_id : text;
  family_name : text;
  ghost_profile_name : text;
  similarity_score : nat8;
};

type ClaimStatus = variant {
  Pending;
  Approved;
  Rejected;
  Expired;
};

type ClaimRequest = record {
  id : text;
  requester : principal;
  family_id : text;
  member_id : text;
  requester_profile : UserProfile;
  ghost_member : FamilyMember;
  created_at : nat64;
  status : ClaimStatus;
};

type ProcessClaimRequest = record {
  claim_id : text;
  approve : bool;
  admin_message : opt text;
};

type GhostProfileMatchResult = variant { Ok : vec GhostProfileMatch; Err : text };
type ClaimRequestResult = variant { Ok : ClaimRequest; Err : text };
type ClaimRequestsResult = variant { Ok : vec ClaimRequest; Err : text };
type ProfileWithGhostResult = variant { Ok : record { UserProfile; vec GhostProfileMatch }; Err : text };

// User Search Types
type UserSearchResult = record {
  id : text;
  full_name : text;
  surname_at_birth : text;
  user_principal : principal;
};

type UserSearchResultList = variant { Ok : vec UserSearchResult; Err : text };

// Family Invitation Types
type InvitationStatus = variant {
  Pending;
  Accepted;
  Declined;
  Expired;
};

type FamilyInvitation = record {
  id : text;
  family_id : text;
  family_name : text;
  inviter : principal;
  inviter_name : text;
  invitee : principal;
  invitee_id : text;
  message : opt text;
  created_at : nat64;
  status : InvitationStatus;
  relationship_to_admin : text;
};

type SendInvitationRequest = record {
  user_id : text;
  family_id : text;
  message : opt text;
  relationship_to_admin : text;
};

type ProcessInvitationRequest = record {
  invitation_id : text;
  accept : bool;
};

type FamilyInvitationsResult = variant { Ok : vec FamilyInvitation; Err : text };

// Notification Types
type NotificationType = variant {
  FamilyInvitation;
  GhostProfileClaim;
  FamilyUpdate;
  SystemAlert;
};

type Notification = record {
  id : text;
  recipient : principal;
  title : text;
  message : text;
  notification_type : NotificationType;
  created_at : nat64;
  read : bool;
  action_url : opt text;
  metadata : opt text;
};

type NotificationsResult = variant { Ok : vec Notification; Err : text };
type UnreadCountResult = variant { Ok : nat64; Err : text };

service : {
  create_profile : (CreateProfileRequest) -> (ProfileResult);
  update_profile : (UpdateProfileRequest) -> (ProfileResult);
  get_profile : () -> (ProfileResult) query;
  create_profile_with_ghost_check : (CreateProfileRequest) -> (ProfileWithGhostResult);
  update_profile_with_ghost_check : (UpdateProfileRequest) -> (ProfileWithGhostResult);
  whoami : () -> (principal) query;
  
  create_family : (CreateFamilyRequest) -> (FamilyResult);
  get_user_families : () -> (FamilyListResult) query;
  get_family : (text) -> (FamilyResult) query;
  
  add_family_member : (AddFamilyMemberRequest) -> (FamilyMemberResult);
  remove_family_member : (text, text) -> (StringResult);
  
  add_member_event : (AddEventRequest) -> (FamilyEventResult);
  get_member_events_chronological : (text, text) -> (FamilyEventsResult) query;
  
  find_matching_ghost_profiles : () -> (GhostProfileMatchResult) query;
  submit_ghost_profile_claim : (text, text) -> (ClaimRequestResult);
  get_pending_claims_for_admin : () -> (ClaimRequestsResult) query;
  process_ghost_profile_claim : (ProcessClaimRequest) -> (StringResult);
  get_my_claim_requests : () -> (ClaimRequestsResult) query;
  
  toggle_family_visibility : (text, bool) -> (StringResult);
  
  // User search and invitation functions
  search_users : (text) -> (UserSearchResultList) query;
  send_family_invitation : (SendInvitationRequest) -> (StringResult);
  process_family_invitation : (ProcessInvitationRequest) -> (StringResult);
  get_my_invitations : () -> (FamilyInvitationsResult) query;
  get_sent_invitations : () -> (FamilyInvitationsResult) query;
  
  // Notification functions
  get_my_notifications : () -> (NotificationsResult) query;
  get_unread_notification_count : () -> (UnreadCountResult) query;
  mark_notification_read : (text) -> (StringResult);
  mark_all_notifications_read : () -> (StringResult);
  
  // Test function
  test_search_users : (text) -> (variant { Ok : vec text; Err : text }) query;
}